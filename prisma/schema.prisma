// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User roles enum
enum Role {
  AGRIBUSINESS
  BUSINESS_BUYER
  LOGISTICS_PARTNER
  // ADMIN
}

// Base User model
model User {
  id               String            @id @default(uuid())
  email            String            @unique
  name             String
  role             Role
  password         String?
  isActive         Boolean           @default(true)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  // Role-specific profiles
  agribusiness     Agribusiness?
  businessBuyer    BusinessBuyer?
  logisticsPartner LogisticsPartner?
  // Chat relation
  messagesSent     Message[]
}

// Agribusiness profile
model Agribusiness {
  id                 String             @id @default(uuid())
  userId             String             @unique
  user               User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  // Stage 1: Initial Registration Data (from sign-up form)
  businessName       String
  tradingType        String
  primaryCropCategory String
  country            String
  state              String
  // Stage 2: KYB Status and Business Operations
  kybStatus          KYBStatus          @default(NOT_SUBMITTED)
  subscriptionTier   String             @default("FREE")
  isKybVerified      Boolean            @default(false)

  bio               String?
  contactNo            String?
  businessImage     String?
  
  // Social Media Links
  facebookUrl       String?
  instagramUrl      String?
  websiteUrl        String?

  // Payout Bank Account (optional but required before listing products)
  bankAccountHolderName String?
  bankName               String?
  bankAccountNumber      String?
  bankSwiftCode          String?
  bankRoutingNumber      String?
  
  // Relationship to KYB form
  kybForm            KYBForm?
  // Relationship to products
  products           Product[]
  orders              Order[]
  // Relationship to subscription
  subscription       Subscription?
  // Relationship to feedback
  feedback           Feedback[]
  chatRooms          ChatRoom[]
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
}

enum KYBStatus {
  NOT_SUBMITTED
  PENDING
  APPROVED
  REJECTED
  REQUIRES_RESUBMISSION
}

model KYBForm {
  id                    String             @id @default(uuid())
  agribusinessId        String             @unique
  agribusiness          Agribusiness       @relation(fields: [agribusinessId], references: [id], onDelete: Cascade)
  logisticsId           String?            @unique
  logisticsPartner      LogisticsPartner?  @relation(fields: [logisticsId], references: [id], onDelete: Cascade)
  
  // KYB-specific fields
  businessRegistrationNumber String?
  businessAddress       String
  taxId                 String?
  businessLicense       String?           // File path or URL
  
  // KYB Review fields
  submittedAt           DateTime?
  // reviewedAt            DateTime?
  // reviewedBy            String?           // Admin user ID
  // rejectionReason       String?
  
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
}

// Business Buyer profile
model BusinessBuyer {
  id                      String             @id @default(uuid())
  userId                  String             @unique
  user                    User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  companyName             String
  companyAddress          String?
  companyType             String
  contactNo               String?
  businessImage           String?
  loyaltyPoints           Int                @default(0)
  // Relationship to orders
  orders                  Order[]
  chatRooms               ChatRoom[]
  feedback                Feedback[]
  // Loyalty history relation
  loyaltyHistory          LoyaltyPointHistory[]
  createdAt               DateTime           @default(now())
  updatedAt               DateTime           @updatedAt
}

// Logistics Partner profile
model LogisticsPartner {
  id                 String             @id @default(uuid())
  userId             String             @unique
  user               User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  companyName        String
  companyAddress     String?
  businessImage      String?
  contactNo          String?
  serviceAreas       String[]           @default([])
  transportModes     String[]           @default([])
  estimatedDeliveryTime String?
  pricingModel       String?
  pricingConfig      String[]           @default([])

  kybStatus          KYBStatus          @default(NOT_SUBMITTED)
  isKybVerified      Boolean            @default(false)
  kybForm            KYBForm?

  products           Product[]
  orders             Order[]            // Orders assigned to this logistics partner
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
}

// Admin profile
// model Admin {
//   id          String    @id @default(uuid())
//   userId      String    @unique
//   user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
//   department  String?
//   permissions String[]  @default(["ALL"]) // All admins have full permissions
//   lastLogin   DateTime?
//   createdAt   DateTime  @default(now())
//   updatedAt   DateTime  @updatedAt
// }

// Product status enum
enum ProductStatus {
  ACTIVE
  INACTIVE
  OUT_OF_STOCK
  EXPIRED
}

// Product model for agricultural products
model Product {
  id                    String        @id @default(uuid())
  agribusinessId        String
  agribusiness          Agribusiness  @relation(fields: [agribusinessId], references: [id], onDelete: Cascade)
  
  // Section A: Product Information
  productTitle          String
  cropCategory          String
  description           String?
  unitOfMeasurement     String
  minimumOrderQuantity  Int
  quantityAvailable     Int
  
  // Section B: Pricing & Terms
  pricing               Decimal       @db.Decimal(10, 2)
  currency              String        @default("RM")
  allowBidding          Boolean       @default(false)
  
  // Bidding-specific fields (only used when allowBidding is true)
  minimumIncrement      Decimal?      @db.Decimal(10, 2)
  auctionEndTime        DateTime?
  autoAcceptThreshold   Decimal?      @db.Decimal(10, 2)
  
  // Section C: Additional Details & Media
  storageConditions     String?
  expiryDate            DateTime?
  location              String
  productImages         String[]      @default([]) // Array of image URLs/paths
  
  // Section D: Shipping Options
  shippingMethod        String?
  logisticsPartnerId    String?
  logisticsPartner      LogisticsPartner? @relation(fields: [logisticsPartnerId], references: [id], onDelete: SetNull)
  directShippingCost    Decimal?      @db.Decimal(10, 2)
  // selectedLogistics     String?
  
  // Product status and metadata
  status                ProductStatus @default(ACTIVE)
  isActive              Boolean       @default(true)
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  
  // Relationships
  orders                Order[]
  feedback              Feedback[]
  chatRooms             ChatRoom[]
  
  @@index([agribusinessId])
  @@index([cropCategory])
  @@index([status])
}

// Order model to represent a purchase made by a BusinessBuyer for a Product
model Order {
  id               String         @id @default(uuid())
  buyerId          String
  buyer            BusinessBuyer  @relation(fields: [buyerId], references: [id], onDelete: Cascade)
  sellerId         String
  seller           Agribusiness   @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  productId        String
  product          Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  // Logistics Partner relationship
  logisticsPartnerId String?
  logisticsPartner   LogisticsPartner? @relation(fields: [logisticsPartnerId], references: [id], onDelete: SetNull)
  
  // Order details
  quantity         Int
  unitPrice        Decimal        @db.Decimal(10, 2)
  subtotal         Decimal        @db.Decimal(12, 2)
  shippingCost     Decimal        @db.Decimal(10, 2) @default(0)
  totalAmount      Decimal        @db.Decimal(12, 2)
  currency         String         @default("RM")
  status           String         @default("pending") // pending, confirmed, shipped, delivered, cancelled
  
  // Buyer information
  deliveryAddress  String
  
  // Shipping details
  estimatedDeliveryTime String?
  shippingDistance Float?
  
  // Payment details
  paymentMethod    String         @default("card")
  paymentStatus    String?
  stripeSessionId  String?
  stripePaymentIntentId String?
  
  // Bid-related fields
  isBid            Boolean        @default(false)
  bidPlacedAt      DateTime?
  bidAcceptedAt    DateTime?
  bidRejectedAt    DateTime?
  
  // Additional notes
  notes            String?
  
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  feedback         Feedback?
  // Relationship
  transactions     SalesTransaction[]
  loyaltyPointHistory LoyaltyPointHistory[]

  @@index([buyerId])
  @@index([sellerId])
  @@index([productId])
  @@index([logisticsPartnerId])
  @@index([status])
}

model Feedback {
  id              String         @id @default(uuid())
  orderId         String         @unique
  order           Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  buyerId         String
  buyer           BusinessBuyer  @relation(fields: [buyerId], references: [id], onDelete: Cascade)
  productId       String
  product         Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  agribusinessId  String
  agribusiness    Agribusiness   @relation(fields: [agribusinessId], references: [id], onDelete: Cascade)

  // Ratings
  productRating   Int            // 1–5 stars for product
  sellerRating    Int            // 1–5 stars for seller
  // Feedback text
  productReview   String?        // buyer’s review about product quality
  sellerReview    String?        // buyer’s review about seller service

  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@index([productId])
  @@index([agribusinessId])
  @@index([buyerId])
  @@index([orderId])
}

model ChatRoom {
  id         String   @id @default(uuid())
  buyerId    String
  buyer      BusinessBuyer @relation(fields: [buyerId], references: [id], onDelete: Cascade)
  sellerId   String
  seller      Agribusiness @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  messages   Message[]

  // Persist a product pinned to this conversation so the chat header can always render it
  pinnedProductId String?
  pinnedProduct   Product?  @relation(fields: [pinnedProductId], references: [id], onDelete: SetNull)

  @@index([pinnedProductId])
}

model Message {
  id         String   @id @default(uuid())
  chatRoomId String
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  senderId   String
  sender     User     @relation(fields: [senderId], references: [id], onDelete: Cascade)
  content    String   @default("")
  
  // Optional image attachment fields
  imageUrl   String?
  imageMime  String?

  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())
}


// SalesTransaction model represents a completed payment to the seller for an order
model SalesTransaction {
  id               String    @id @default(uuid())
  orderId          String
  order            Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  amountPaid       Decimal   @db.Decimal(12, 2)
  currency         String    @default("RM")
  paymentMethod    String
  stripePaymentIntentId String?
  paidAt           DateTime  @default(now())
  // Refund tracking fields
  isRefunded       Boolean   @default(false)
  refundAmount     Decimal?  @db.Decimal(12, 2)
  refundReason     String?
  refundedAt       DateTime?
  stripeRefundId   String?

  @@index([orderId])
  @@index([paidAt])
  @@index([isRefunded])
}

// Loyalty program enums and models
enum LoyaltyEventType {
  EARN
  REDEEM
  ADJUST
  REFUND_REVERSAL
}

model LoyaltyPointHistory {
  id          String            @id @default(uuid())
  buyerId     String
  buyer       BusinessBuyer     @relation(fields: [buyerId], references: [id], onDelete: Cascade)
  orderId     String?
  order       Order?            @relation(fields: [orderId], references: [id], onDelete: SetNull)
  type        LoyaltyEventType
  points      Int               // positive for EARN/REFUND_REVERSAL, positive for REDEEM represents points used
  amount      Decimal?          @db.Decimal(12, 2) // RM value represented by this event
  description String?
  createdAt   DateTime          @default(now())

  @@index([buyerId])
  @@index([orderId])
  @@index([createdAt])
}

// Subscription model for managing subscription plans
model Subscription {
  id               String            @id @default(uuid())
  agribusinessId   String            @unique
  agribusiness     Agribusiness      @relation(fields: [agribusinessId], references: [id], onDelete: Cascade)
  tier             SubscriptionTier  @default(FREE)
  billingCycle     BillingCycle      @default(MONTHLY)
  status           SubscriptionStatus @default(ACTIVE)
  currentPeriodStart DateTime?
  currentPeriodEnd   DateTime?
  nextBillingDate    DateTime?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  
  // Relationship to billing history
  billingHistory   BillingHistory[]
}

// Billing History model
model BillingHistory {
  id             String       @id @default(uuid())
  subscriptionId String
  subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  tier           SubscriptionTier
  amount         Decimal      @db.Decimal(10, 2)
  currency       String       @default("RM")
  billingCycle   BillingCycle
  paymentStatus  PaymentStatus @default(PENDING)
  paidAt         DateTime?
  createdAt      DateTime     @default(now())
  
  @@index([subscriptionId])
  @@index([createdAt])
}

// Enums for subscription management
enum SubscriptionTier {
  FREE
  STANDARD
  ELITE
}

enum BillingCycle {
  MONTHLY
  YEARLY
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED
  SUSPENDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}
